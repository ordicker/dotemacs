* Notes 
** emacs configuration
--prefix=/usr/local/stow/emacs-29.1 --with-x --with-xwidgets --with-mailutils --with-modules --with-json --with-native-compilation=aot --with-tree-sitter --with-imagemagick
* Emacs configuration
** Get to here
#+BEGIN_SRC emacs-lisp
(defun edit-configs ()
  "Opens the README.org file."
  (interactive)
  (find-file "~/.emacs.d/my_init.org"))

(global-set-key (kbd "C-x i") #'edit-configs)
#+END_SRC
** emacs server (emacsclient)
#+begin_src emacs-lisp
  (server-start)
#+end_src

** Constants
#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
#+END_SRC
** default emacs stuff
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(global-auto-revert-mode t)
(blink-cursor-mode -1)
(setq-default cursor-type 'bar)
(global-auto-revert-mode t)
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
(cua-selection-mode 1)
(global-hl-line-mode 1)
(setq split-height-threshold nil)
(setq split-width-threshold 70)
(setq native-comp-async-report-warnings-errors nil)
(defalias 'yes-or-no #'y-or-n-p)
(recentf-mode t)
  
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)

#+END_SRC
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))



  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))

  (use-package trashed
    :ensure t
    :commands (trashed)
    :config
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))

#+end_src

** Key binding
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "C-x C-c") nil)
(global-set-key (kbd "M-/") nil)
;; Adjust font size like web browsers
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+END_SRC
** garbage collection 
#+BEGIN_SRC emacs-lisp
(defvar better-gc-cons-threshold 67108864 ; 64mb
  "The default value to use for `gc-cons-threshold'.

If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))
;; Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+END_SRC

** use-package
Bootstrap use-package

#+BEGIN_SRC emacs-lisp 
  (setq load-prefer-newer t)		; Don't load outdated byte code

  (setq use-package-always-ensure t)
  (require 'package)
  (add-to-list 'package-archives
	 '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (add-to-list 'display-buffer-alist
	     '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
	       (display-buffer-no-window)
	       (allow-no-window . t)))

  ;; Bootstrap 'use-package'
  (eval-after-load 'gnutls
    '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
    (require 'bind-key)
  (setq use-package-always-ensure t)
#+END_SRC

** No littering
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :demand t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp 
  (let ((mono-spaced-font "Monospace")
      (proportionately-spaced-font "Sans"))
  (set-face-attribute 'default nil :family mono-spaced-font :height 100)
  (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
  (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))

  ;;(set-language-environment "UTF-8")
  ;;(set-charset-priority 'unicode)
  ;;(prefer-coding-system 'utf-8-unix)
  ;(setq default-frame-alist '((font . "DejaVu Sans Mono-16")))
  (setq default-frame-alist '((font . "Hack-16")))
  
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (use-package solarized-theme)

  (use-package heaven-and-hell
    :ensure t
    :init
    (setq heaven-and-hell-themes
	  '((light . solarized-light)
	    (dark . solarized-dark)))
    ;; Optionall, load themes without asking for confirmation.
    (setq heaven-and-hell-load-theme-no-confirm t)
    :hook (after-init . heaven-and-hell-init-hook)
    :bind ("<f6>" . heaven-and-hell-toggle-theme))
  ;; modeline
  (use-package doom-modeline
    :custom 
    (inhibit-compacting-font-caches t)
    ;;(doom-modeline-minor-modes t)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-height 15)
    :hook (after-init . doom-modeline-mode)
    :config 
    (setq doom-modeline-project-detection 'project)
  )

#+END_SRC
 
** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
(use-package good-scroll
  :config 
  (good-scroll-mode 1)
)
#+END_SRC
** Ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+END_SRC
** Wind Move
#+begin_src emacs-lisp
 (use-package windmove
  :ensure nil
  :bind*
  (("M-<left>" . windmove-left)
   ("M-<right>" . windmove-right)
   ("M-<up>" . windmove-up)
   ("M-<down>" . windmove-down)))
#+end_src
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    ;;(setq dashboard-startup-banner "~/.emacs.d/gtd/gtd.png")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "Welcome to Dicker's Emacs")
    (setq dashboard-set-navigator t)
    (setq dashboard-items '((bookmarks . 5)
			    (recents  . 5)
			    (projects . 5)))
  )
#+END_SRC
** Super-save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish
  :custom
  (super-save-auto-save-when-idle t)
  (auto-save-default nil)
  (make-backup-files nil)
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window 'magit)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
)
#+END_SRC
** Save place
return to the last place on the save buffer 
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (save-place-mode))
#+END_SRC
** Anzu
  search and replace with regexp
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :bind (("C-c r" . anzu-query-replace)
         ("C-c C-r" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode))
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC
** Embark/vertico/consult/ctrl-F
#+BEGIN_SRC emacs-lisp 
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package vertico
    :init
    (vertico-mode))

  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))

  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrride nil))

  (use-package savehist
    :hook (after-init . savehist-mode))

  (use-package corfu
    :ensure t
    :hook (after-init . global-corfu-mode)
    :bind (:map corfu-map ("<tab>" . corfu-complete))
    :config
    (setq tab-always-indent 'complete)
    (setq corfu-preview-current nil)
    (setq corfu-min-width 20)
     
    (setq corfu-popupinfo-delay '(1.25 . 0.5))
    (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'
     
    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  (use-package consult
    :bind
    ("C-x b" . consult-buffer)
  )

  (use-package ctrlf
    :config (ctrlf-mode t)
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  )

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC
** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . 'mc/mark-next-like-this)
	 ("C-<" . 'mc/mark-previous-like-this)
	 ("C-c C-<" . 'mc/mark-all-like-this)))

#+end_src

** IBuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  :init
  (use-package ibuffer-vc
    :commands (ibuffer-vc-set-filter-groups-by-vc-root)
    :custom
    (ibuffer-vc-skip-if-remote 'nil))
  :custom
  (ibuffer-formats
   '((mark modified read-only locked " "
           (name 35 35 :left :elide)
           " "
           (size 9 -1 :right)
           " "
           (mode 16 16 :left :elide)
           " " filename-and-process)
     (mark " "
           (name 16 -1)
           " " filename))))
#+END_SRC

** Load other files
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (f)
  "load the elisp file only if it exists and is readable"
  (if (file-readable-p f)
      (load-file f)))
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode +1)
)
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
;; prevent new window for ediff session 
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
** Icons (nerd)
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
  

  ;;(use-package all-the-icons :if *sys/gui*)
  ;; 
  ;;(use-package all-the-icons-dired
  ;;  :after all-the-icons
  ;;  :if *sys/gui*
  ;;  :diminish
  ;;  :custom-face
  ;;  (all-the-icons-dired-dir-face ((t `(:foreground ,(face-background 'default)))))
  ;;  :hook (dired-mode . all-the-icons-dired-mode)
  ;;  :config
  ;;  ;; Workaround for all-the-icons bug until PR merged https://github.com/domtronn/all-the-icons.el/pull/150
  ;;  (when (require 'all-the-icons nil 'noerror)
  ;;    (setq all-the-icons-mode-icon-alist
  ;;          (delete '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0 :face all-the-icons-white) all-the-icons-mode-icon-alist))
  ;;    (add-to-list 'all-the-icons-mode-icon-alist '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0))))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+END_SRC
** ripgrep
#+BEGIN_SRC emacs-lisp
;;(use-package rg)
#+END_SRC
** TRAMP
#+begin_src emacs-lisp
  (use-package tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :if *sys/gui*
  :diminish
  :hook ((prog-mode web-mode nxml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-auto-character-face-perc 7))
#+END_SRC

** RTL
#+begin_src emacs-lisp
  (defun change-direction ()
    "Toggle RTL/LTR"
    (interactive)
    (if (eq bidi-paragraph-direction 'left-to-right)
	(setq bidi-paragraph-direction 'right-to-left)
      (setq bidi-paragraph-direction 'left-to-right)
      )
    )

(global-set-key (kbd "<f12>") #'change-direction)
#+end_src
** PATH vs exec-path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))
#+end_src

** programming
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'flymake-mode)


#+end_src
* Pass 
#+BEGIN_SRC emacs-lisp
(use-package password-store)

(use-package password-store-menu
  :config (password-store-menu-enable))
  
(use-package pass
   :after password-store)
  
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config
  (magit-save-repository-buffers 'dontask)
  ;;(global-magit-file-mode 1)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
)

;;(use-package forge
;;  :after magit
;;)

(use-package diff-hl
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'prog-mode-hook #'diff-hl-mode)
  ;; better coloring for light theme 
  :init 
  (custom-set-faces
  '(diff-hl-change ((t (:background "#3a81c3"))))
  '(diff-hl-insert ((t (:background "#7ccd7c"))))
  '(diff-hl-delete ((t (:background "#ee6363")))))
)

(use-package exec-path-from-shell
  :disabled
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

;; Github markdown render
(use-package gh-md)
#+END_SRC
* Org-mode stuff
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))

	;(use-package ox-reveal
	; 	  :config
	; 	  (require 'ox-reveal)
	; 	  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
	; 	  (setq org-reveal-mathjax t))

  (use-package org-re-reveal)
  
  (use-package htmlize)

  (use-package org-gcal
    :defer t
    :config
    (setq org-gcal-client-id (password-store-get "DevOps/gcal/client-id")
	  org-gcal-client-secret (password-store-get "DevOps/gcal/client-secret")
	  org-gcal-file-alist '(("or.dicker@gmail.com" .  "~/workspace/org/gcal.org"))))

  (use-package cdlatex
    :config (add-hook 'org-mode-hook 'turn-on-org-cdlatex))


	;; org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((latex       . t)
       (python      . t)
       (shell       . t)
       (calc        . t)
       (org         . t)))

    (setq org-babel-python-command "python3")
    (setq org-src-fontify-natively t)

    ;; inline preview
    (use-package org-inline-pdf
      :config
      (add-hook 'org-mode-hook #'org-inline-pdf-mode))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))

(use-package projectile-ripgrep
  :after projectile)
#+END_SRC
* Flyspell-correct 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :diminish "Spl"
  :commands (flyspell-mode flyspell-prog-mode)
  :init (add-hook 'text-mode-hook 'flyspell-mode)
        (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  )
#+END_SRC

* Snippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1))

  (defun my-org-latex-yas ()
    "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)

  (use-package yasnippet-snippets)
  (use-package yasnippet-classic-snippets)

  (use-package auto-yasnippet
    :commands (aya-create aya-expand)
    :bind (("C-c ~" . aya-create)
	   ("C-c C-~" . aya-expand)))
#+END_SRC
* Expand-region
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :bind (("C-)" . sp-slurp-hybrid-sexp)
	 ("C-(" . sp-forward-barf-sexp)
  )
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config)
  (show-paren-mode t))
#+END_SRC
* Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '((c-mode c-ts-mode c++-mode c++-ts-mode objc-mode)
  					"clangd-12" "-j=2"
  					"--background-index"
  					"--clang-tidy"
  					"--completion-style=detailed"
  					"--query-driver=/home/dicker/.platformio/packages/toolchain-xtensa-esp32/bin/xtensa-esp32-elf-g++"
  					"--compile-commands-dir=."))
    :hook
    ((prog-mode-hook . eglot-ensure)))
#+end_src
* Shell 
** shell-here
#+BEGIN_SRC emacs-lisp
(use-package shell-here
  :bind ("C-c $" . shell-here)
  :config
  (when *sys/linux*
    (setq explicit-shell-file-name "/bin/bash")))
#+END_SRC
** vterm
github]]
#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src
* Latex
** tex
sudo apt install auctex texlive-full
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :config
  (setq TeX-auto-save t))
 
(use-package tex
    :ensure auctex
    :config (progn
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    ))
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools-install
  :ensure pdf-tools
  :if (and *sys/gui* (not *sys/win32*))
  :mode "\\.pdf\\'"
  :commands (pdf-loader-install)
  :custom
  (TeX-view-program-selection '((output-pdf "pdf-tools")))
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  :hook
  (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  :config
  (pdf-loader-install))
#+END_SRC
* Julia 
#+BEGIN_SRC emacs-lisp
    (use-package julia-mode
      :defer t
      :commands julia-mode
      :mode ("\\.jl$" . julia-mode))
 
    ;; for julia-babel and ploting
    ;; alias julia-org="julia -q -J<path-to-sysimage>"
    (use-package julia-vterm
      :config
      (setq julia-vterm-repl-program
	    "julia -q -J/home/dicker/workspace/julia-org/JuliaOrgSysimage.so --project=/home/dicker/workspace/julia-org"))
 #+END_SRC
* Python 
pyright need node version> 12.0.0
to install that 
$ sudo npm install n -g
$ sudo n stable
#+BEGIN_SRC emacs-lisp 
  (use-package python-mode
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3"))
 
  (use-package poetry
    :hook
    (python-mode . poetry-tracking-mode))
 
#+END_SRC
* C/C++/CUDA
install clangd 
#+begin_src bash
$sudo apt-get install clangd-12	 
#+end_src
 
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)
 
(use-package modern-cpp-font-lock
  :diminish t
  :init (modern-c++-font-lock-global-mode t))
 
;;(use-package cuda-mode)
 
;;; cmake
(use-package cmake-mode)
#+END_SRC
 
* Matlab
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :hook (matlab-shell)
  :mode ("\\.m\\'" . matlab-mode)
  :config
  (matlab-cedet-setup)
  :custom
  (matlab-indent-function t)
  (matlab-shell-command "matlab"))
#+END_SRC
* OpenSCAD
$sudo apt-get install openscad
#+begin_src emacs-lisp
;;(use-package scad-mode)
;;(use-package scad-preview)
#+end_src
 
* Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter-langs)
  (use-package tree-sitter
    :ensure t
    :after tree-sitter-langs)
  
    ;;	(use-package turbo-log
    ;;	  :quelpa (turbo-log :fetcher github :repo "artawower/turbo-log.el")
    ;;	  :bind (("C-S-l" . turbo-log-print)
    ;;	   ("C-S-i" . turbo-log-print-immediately)
    ;;	   ("C-S-h" . turbo-log-comment-all-logs)
    ;;	   ("C-S-s" . turbo-log-uncomment-all-logs)
    ;;	   ("C-S-[" . turbo-log-paste-as-logger)
    ;;	   ("C-S-]" . turbo-log-paste-as-logger-immediately)
    ;;	   ("C-S-d" . turbo-log-delete-all-logs))
    ;;	  :config
    ;;	     (setq turbo-log-msg-format-template "\": %s\"")
    ;;	     (setq turbo-log-allow-insert-without-tree-sitter-p t))
    ;;	(turbo-log-configure
    ;;	 :modes (julia-mode)
    ;;	 :strategy merge
    ;;	 :loggers ("println(%s)")
    ;;	 :jump-list ((class_declaration (method_definition "constructor")))
    ;;	 :identifier-node-types (identifier member_expression)
    ;;	 :post-insert-hook (prettier-prettify)
    ;;	 :msg-format-template "\"Debug: %s\"")
#+end_src
 
* Fun
** vimgolf
** exercism
#+begin_src emacs-lisp
  (use-package exercism)
#+end_src
** leetcode
#+begin_src emacs-lisp
  (use-package leetcode
    :custom
    (leetcode-prefer-language "python3")
    (leetcode-save-solutions t)
    (leetcode-directory "~/workspace/leetcode"))
#+end_src
 
* Aider - LLM coder
#+begin_src emacs-lisp
  (use-package aidermacs
    :bind (("C-c a" . aidermacs-transient-menu))
    :config
    ; Set API_KEY in .bashrc, that will automatically picked up by aider or in elisp
    ;(setenv "ANTHROPIC_API_KEY" "sk-...")
    ; defun my-get-openrouter-api-key yourself elsewhere for security reasons
    ;(setenv "OPENROUTER_API_KEY" (my-get-openrouter-api-key))
    (setenv "GEMINI_API_KEY" "")
    (setq aidermacs-backend 'vterm)
    (setq aidermacs-vterm-multiline-newline-key "S-<return>")
    :custom
    ;(aidermacs-use-architect-mode t)
    (aidermacs-default-model "gemini/gemini-1.5-pro-latest"))
 
#+end_src

