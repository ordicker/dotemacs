* Notes 
** emacs configuration
--prefix=/usr/local/stow/emacs-27.1 --with-x-toolkit=gtk --with-xwidgets --with-cairo --with-mailutils
** fonts and icons 
Run M-x all-the-icons-install-fonts

** google drive on linux 
[[https://github.com/astrada/google-drive-ocamlfuse][google-drive-ocamlfuse]]
[[https://github.com/astrada/google-drive-ocamlfuse/wiki/Team-Drives][Team Drives]]
mount command
google-drive-ocamlfuse -label GalGalaim ~/GoogleDrive/
* Emacs configuration
** Get to here
#+BEGIN_SRC emacs-lisp
(defun edit-configs ()
  "Opens the README.org file."
  (interactive)
  (find-file "~/.emacs.d/my_init.org"))

(global-set-key (kbd "C-x i") #'edit-configs)
#+END_SRC
** Constants
#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
#+END_SRC
** default emacs stuff
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(global-auto-revert-mode t)
(blink-cursor-mode -1)
(setq-default cursor-type 'bar)
(global-auto-revert-mode t)
(delete-selection-mode 1)
(cua-selection-mode 1)
(global-hl-line-mode 1)
(setq split-height-threshold nil)
(setq split-width-threshold 70)
#+END_SRC
** Key binding
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "C-x C-c") nil)
(global-set-key (kbd "M-/") nil)
;; Adjust font size like web browsers
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+END_SRC
** garbage collection 
#+BEGIN_SRC emacs-lisp
(defvar better-gc-cons-threshold 67108864 ; 64mb
  "The default value to use for `gc-cons-threshold'.

If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))
;; Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+END_SRC

** use-package
Bootstrap use-package

#+BEGIN_SRC emacs-lisp 
(setq load-prefer-newer t)              ; Don't load outdated byte code

(setq use-package-always-ensure t)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
  (require 'bind-key)
  (setq use-package-always-ensure t)
#+END_SRC

** No littering
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :demand t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp 
(set-language-environment "UTF-8")
(setq default-frame-alist '((font . "DejaVu Sans Mono-16")))
(tool-bar-mode -1)
(menu-bar-mode -1)

(use-package solarized-theme)

(use-package heaven-and-hell
  :ensure t
  :init
  (setq heaven-and-hell-themes
        '((light . solarized-light)
          (dark . solarized-dark)))
  ;; Optionall, load themes without asking for confirmation.
  (setq heaven-and-hell-load-theme-no-confirm t)
  :hook (after-init . heaven-and-hell-init-hook)
  :bind ("<f6>" . heaven-and-hell-toggle-theme))

;; modeline
;; This package requires the fonts included with all-the-icons to be installed. Run M-x all-the-icons-install-fonts to do so.
(use-package doom-modeline
  :custom 
  (inhibit-compacting-font-caches t)
  ;;(doom-modeline-minor-modes t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 15)
  :hook (after-init . doom-modeline-mode)
  :config 
  (setq doom-modeline-project-detection 'project)
)

#+END_SRC
 
** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
(use-package good-scroll
  :config 
  (good-scroll-mode 1)
)
#+END_SRC
** Ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-banner-logo-title "Welcome to Dicker's Emacs")
  (setq dashboard-set-navigator t)
  (setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))
)
#+END_SRC
** Super-save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish
  :custom
  (super-save-auto-save-when-idle t)
  (auto-save-default nil)
  (make-backup-files nil)
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window 'magit)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
)
#+END_SRC
** Winner
undo windows state with C-c left/right
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Save place
return to the last place on the save buffer 
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (save-place-mode))
#+END_SRC
** Anzu
  search and replace with regexp
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :bind (("C-c r" . anzu-query-replace)
         ("C-c C-r" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode))
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC
** Selectrum/consult/ctrl-F
#+BEGIN_SRC emacs-lisp 
(use-package selectrum
  :config (selectrum-mode t))

(use-package selectrum-prescient
  :after selectrum
  :config
  (setq prescient-persist-mode t)
  (selectrum-prescient-mode t))

(use-package consult)

(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))

(use-package ctrlf
  :config (ctrlf-mode t))

(use-package marginalia
  :after selectrum
  :init (marginalia-mode)
  (advice-add #'marginalia-cycle :after
    (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit 'keep-selected))))

  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
)

(use-package vertico
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+END_SRC
** IBuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  :init
  (use-package ibuffer-vc
    :commands (ibuffer-vc-set-filter-groups-by-vc-root)
    :custom
    (ibuffer-vc-skip-if-remote 'nil))
  :custom
  (ibuffer-formats
   '((mark modified read-only locked " "
           (name 35 35 :left :elide)
           " "
           (size 9 -1 :right)
           " "
           (mode 16 16 :left :elide)
           " " filename-and-process)
     (mark " "
           (name 16 -1)
           " " filename))))
#+END_SRC

** Load other files
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (f)
  "load the elisp file only if it exists and is readable"
  (if (file-readable-p f)
      (load-file f)))
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode +1)
)
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
;; prevent new window for ediff session 
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :if *sys/gui*)

(use-package all-the-icons-dired
  :after all-the-icons
  :if *sys/gui*
  :diminish
  :custom-face
  (all-the-icons-dired-dir-face ((t `(:foreground ,(face-background 'default)))))
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  ;; Workaround for all-the-icons bug until PR merged https://github.com/domtronn/all-the-icons.el/pull/150
  (when (require 'all-the-icons nil 'noerror)
    (setq all-the-icons-mode-icon-alist
          (delete '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0 :face all-the-icons-white) all-the-icons-mode-icon-alist))
    (add-to-list 'all-the-icons-mode-icon-alist '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0))))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+END_SRC
** ripgrep
#+BEGIN_SRC emacs-lisp
;;(use-package rg)
#+END_SRC
** TRAMP
#+begin_src emacs-lisp
(use-package tramp)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :if *sys/gui*
  :diminish
  :hook ((prog-mode web-mode nxml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-auto-character-face-perc 7))
#+END_SRC

** RTL
#+begin_src emacs-lisp
  (defun change-direction ()
    "Toggle RTL/LTR"
    (interactive)
    (if (eq bidi-paragraph-direction 'left-to-right)
	(setq bidi-paragraph-direction 'right-to-left)
      (setq bidi-paragraph-direction 'left-to-right)
      )
    )

(global-set-key (kbd "<f12>") #'change-direction)
#+end_src
* Pass 
#+BEGIN_SRC emacs-lisp
(use-package password-store)

(defun pass-pull-and-push-to-git ()
   (message "pull and push changes to git") 
   (lambda () (password-store--run-git "pull")
              (password-store--run-git "push")))

(use-package pass
  :after password-store
  :config
  (advice-add #'pass-update-buffer :before #'pass-pull-and-push-to-git)
)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config
  (magit-save-repository-buffers 'dontask)
  ;;(global-magit-file-mode 1)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
)

;;(use-package forge
;;  :after magit
;;)

(use-package diff-hl
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  ;; better coloring for light theme 
  :init 
  (custom-set-faces
  '(diff-hl-change ((t (:background "#3a81c3"))))
  '(diff-hl-insert ((t (:background "#7ccd7c"))))
  '(diff-hl-delete ((t (:background "#ee6363")))))
)

(use-package exec-path-from-shell
  :disabled
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

;; Github markdown render
(use-package gh-md)
#+END_SRC
* Org-mode stuff
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
      :hook (org-mode . org-superstar-mode))

(use-package ox-reveal
    :config
    (require 'ox-reveal)
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t))

(use-package htmlize)

(use-package org-gcal
  :defer t
  :config
  (setq org-gcal-client-id (password-store-get "DevOps/gcal/client-id")
      org-gcal-client-secret (password-store-get "DevOps/gcal/client-secret")
      org-gcal-file-alist '(("or.dicker@gmail.com" .  "~/workspace/org/gcal.org"))))

(use-package cdlatex
    :config (add-hook 'org-mode-hook 'turn-on-org-cdlatex))


;; org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex     . t)
   (python    . t)
   (shell     . t)
   (calc      . t)
   (org       . t)))

(setq org-babel-python-command "python3")
(setq org-src-fontify-natively t)

#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))

(use-package projectile-ripgrep
  :after projectile)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode t))
#+END_SRC
* Flyspell-correct 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :diminish "Spl"
  :commands (flyspell-mode flyspell-prog-mode)
  :init (add-hook 'text-mode-hook 'flyspell-mode)
        (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  )
#+END_SRC

* Snippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1))

(use-package yasnippet-snippets)
(use-package yasnippet-classic-snippets)

(use-package auto-yasnippet
  :commands (aya-create aya-expand)
  :bind (("C-c ~" . aya-create)
         ("C-c C-~" . aya-expand)))
#+END_SRC
* Expand-region
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :bind (("C-c ) <right>" . sp-slurp-hybrid-sexp)
         ("C-c ) <left>" . sp-forward-barf-sexp)
  )
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config)
  (show-paren-mode t)
)
#+END_SRC
* lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :init
  (setq lsp-auto-guess-root nil)
  (setq lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (setq lsp-file-watch-threshold 10000)
  (setq read-process-output-max (* 2 1024 1024))
  (setq lsp-eldoc-hook nil)
  (setq lsp-idle-delay 0.500)
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((julia-mode python-mode c-mode c++-mode cuda-mode) . lsp)) 

(use-package lsp-ui 
   :init
   (setq lsp-eldoc-enable-hover nil)
   (setq lsp-signature-auto-activate nil)
   (setq lsp-signature-render-documentation nil)
   (setq lsp-ui-doc-show-with-cursor nil)
   :commands lsp-ui-mode)
#+END_SRC

* Compeny
#+BEGIN_SRC emacs-lisp
(use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t)
)

(use-package company-statistics         ; Sort company candidates by statistics
  :defer t
  :config
  (setq company-statistics-file (emacs-d "cache/company-statistics"))
  (with-eval-after-load 'company
    (company-statistics-mode)))
#+END_SRC
* Shell 
** shell-here
#+BEGIN_SRC emacs-lisp
(use-package shell-here
  :bind ("C-c $" . shell-here)
  :config
  (when *sys/linux*
    (setq explicit-shell-file-name "/bin/bash")))
#+END_SRC
** vterm
[[https://github.com/akermu/emacs-libvterm][github]]
#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src
* Latex
** tex
sudo apt install auctex texlive-full
#+BEGIN_SRC emacs-lisp
(use-package tex
    :ensure auctex)
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools-install
  :ensure pdf-tools
  :if (and *sys/gui* (not *sys/win32*))
  :mode "\\.pdf\\'"
  :commands (pdf-loader-install)
  :custom
  (TeX-view-program-selection '((output-pdf "pdf-tools")))
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  :hook
  (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  :config
  (pdf-loader-install))
#+END_SRC
* Julia
#+BEGIN_SRC emacs-lisp
(use-package julia-mode
   :defer t
   :commands julia-mode
   :mode ("\\.jl$" . julia-mode))

(use-package lsp-julia
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.6"))

#+END_SRC
* Python 
pyright need node version> 12.0.0
to install that 
$ sudo npm install n -g
$ sudo n stable
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'exec-path "~/anaconda3/bin/")
(use-package virtualenv)

(use-package python-mode
  :after flycheck
  :mode "\\.py\\'"
  :custom
  (python-indent-offset 4)
  (flycheck-python-pycompile-executable "python3")
  (python-shell-interpreter "python3"))

(use-package lsp-pyright
  :hook (python-mode . (lambda () (require 'lsp-pyright)))
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3")))
#+END_SRC
* C/C++/CUDA
install clangd 
$sudo apt-get install clangd-10
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)
;; TRAMP support 
(with-eval-after-load 'lsp-mode (lsp-register-client
(make-lsp-client
  :new-connection (lsp-tramp-connection "clangd-10")
  :major-modes '(c-mode c++-mode cuda-mode)
  :remote? t
  :server-id 'clangd-remote)))

;;(setq lsp-log-io t) ; bug with lsp-mode and tramp
(setq lsp-clients-clangd-args `("-j=2"
                                "--background-index"
                                "--clang-tidy"
				 "--completion-style=detailed"))


(use-package modern-cpp-font-lock
  :diminish t
  :init (modern-c++-font-lock-global-mode t))

(use-package cuda-mode)

;;; cmake
(use-package cmake-mode)
#+END_SRC

* Matlab
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :hook (matlab-shell)
  :mode ("\\.m\\'" . matlab-mode)
  :config
  (matlab-cedet-setup)
  :custom
  (matlab-indent-function t)
  (matlab-shell-command "matlab"))
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient)

(use-package company-restclient
    :config 
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

* YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)

#+END_SRC
* OpenSCAD
$sudo apt-get install openscad
#+begin_src emacs-lisp
(use-package scad-mode)
(use-package scad-preview)
#+end_src

